# -*- coding: utf-8 -*-
"""fase1-machine-learning-avancado-aula1-modelos-de-classificacao.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AGm_r0hjKA45bcKOZdK6u9rXdJLJ2_b5
"""

import pandas as pd

dados = pd.read_excel('gaf_esp.xlsx')
dados.head()

dados.tail()

"""## Variáveis Características e Target

*   **Variáveis Características**: São variáveis que caracterizam a variável target. EX: "Comprimento do Abdômen" e	"Comprimento das Antenas".

*   **Variável Target**: É a variável de resposta que deriva das variáveis de características. EX: "Espécie".

**OBS**: Em modelos supervisionados é obrigatório ter a variável target.
"""

dados.describe()

dados.shape

# a função grupby(<column>) agrupa os dados de acordo com os valores da coluna
dados.groupby('Espécie').describe()

# Criar um gráfico de dispersão
dados.plot.scatter(x='Comprimento do Abdômen', y='Comprimento das Antenas')

"""# Separando a base de dados em treino e teste

*   **Treino**: É importante que a maior parte dos dados estejam concentrados na parte de treino, pois é nessa parte que irar treinar o modelo e fazer predições mais próximas da realidade.

*  **Teste**: A parte de teste é uma fração dados utilizado para testar a predição do modelo.
"""

from sklearn import *

from sklearn.model_selection import train_test_split

x = dados[['Comprimento do Abdômen', 'Comprimento das Antenas']]

x

y = dados['Espécie']

y

# stratify -> realiza um equilibrio na target, ou seja, tanto nas bases de dados de treino e de teste terão
# o número gafanhotos e de esperanças em equilibrio
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=42)

list(y_train).count("Gafanhoto")

list(y_train).count("Esperança")

len(x_train)

len(x_test)

x_train

y_train

"""# KNN - k-nearest neighbors

É um algoritmo de aprendizado de máquina supervisionado usado tanto para classificação quanto para regressão. Ele mede a distanância entre pontos para poder fazer classificações de dados.
"""

from sklearn.neighbors import KNeighborsClassifier

# Iniciando o modelo
modelo_classificador = KNeighborsClassifier(n_neighbors=3)

# Treinando o modelo
modelo_classificador.fit(x_train, y_train)

# Fazendo uma predição
modelo_classificador.predict([[8, 6]])

"""## Métricas de validação

Métricas de validação são medidas para avaliar o desempenho do modelo em fazer previsões.
"""

y_predito = modelo_classificador.predict(x_test)

# accuracy_score é uma métrica que mede o porcentual de acerto do modelo
from sklearn.metrics import accuracy_score

accuracy_score(y_true=y_test, y_pred=y_predito)

"""# Observação

O accuracy_score do modelo resultou em 1.0, que seria 100%. Nesse caso como os exemplos são bem simples é normal dar 100% no resultado, porém na maioria dos casos é importante ficar desconfiado de resultados próxmos ao 100%. É possível que nesse modelo tenha decorado os resultados, isso significa que ele não conseguiria avaliar bem dados mais generalizados. Quando o modelo se ajusta muito bem ao dados de teste isso se chama **Sobreajuste (Overfitting)**.
"""